#!/bin/bash

# Usage:
# buildFunction <base> <file> <funct> <index>

# Builds the YAML file for documenting a function.
#   Class is annotated with "// @function" just above its declaration.
#
#   This looks at the file <file> (retrieved from the command line) and works on the named
#   function <function> (retrieved from the command line)
#
#   base is the namespace name (compounded together without ::) to allow us to generate unique file names.
#
#   This uses:
#
#   Appends the files:
#       docs/${file}.${funct}


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

namespace=$(grep 'using namespace' * 2> /dev/null| awk '{print $3}' | head -1 | sed -e 's/;//' )

base=$1
file=$2
funct=$3
index=$4
children=()

descriptionAll=$( ${DIR}/functionDesc ${file} ${index} )
description=$( echo "${descriptionAll}" | grep -v '^-- ' )
funcData=$( ${DIR}/functionInfo ${file} ${funct} ${index} | head -1 )
tempInfo=$( ${DIR}/functionInfo ${file} ${funct} ${index} | tail -1 )
IFS=','
funcInfo=( ${funcData} )
IFS=' '

len=${#funcInfo[@]}
paramList=''
if [[ ${len} > 1 ]]; then
    loop=1
    while [[ ${loop} < ${len} ]]; do
        paramList="${paramList}, ${funcInfo[loop]}"
        loop=$(( ${loop} + 1 ))
    done
    paramList=${paramList:1}
fi
IFS=','
paramArray=( ${paramList} )
IFS=' '

returnDesc=$( echo ${descriptionAll} | grep '^-- ' | grep return | cut -f3- -d" " | xargs )
if [[ "${returnDesc}" != "" ]]; then
    returnDesc="'${returnDesc}'"
fi

returnType=${funcInfo[1]}
returnType=$( echo ${returnType/@/,} | xargs )
if [[ "${returnType}" != "" ]]; then
    returnType="'${returnType}'"
fi

cat - << CLASS_DOC_HEAD
---
layout: function
generate: false
typeInfo:
    namespace: ${namespace}
    header:    ${base}/${file}
    function:  ${funct}
    description: ${description}
    template:  ${tempInfo}
    return:
        type: ${returnType}
        description: ${returnDesc}
CLASS_DOC_HEAD

if [[ ${#paramArray[@]} == 0 ]]; then
    cat - <<FUNCTION_DOC_HEAD_PARAM_EMPTY
    parameters: []
FUNCTION_DOC_HEAD_PARAM_EMPTY
else
    cat - <<FUNCTION_DOC_HEAD_PARAM
    parameters:
FUNCTION_DOC_HEAD_PARAM
fi

for loop in "${paramArray[@]}"; do

    defaultValue=${loop#*=}
    if [[ ${defaultValue} == ${loop} ]]; then
        defaultValue=''
    fi
    args=${loop%=*}
    varName=$( echo ${args} | awk '{print $NF}' )
    typeData=${args%${varName}*}
    typeInfo=$(echo "${typeData}" | xargs)
    if [[ "${typeInfo}" != "" ]]; then
        typeInfo="'${typeInfo}'"
    fi

    paramDesc=$( echo "${descriptionAll}" | grep '^-- ' | grep ${varName} | cut -f3- -d" " | xargs )
    if [[ "${paramDesc}" != "" ]]; then
        paramDesc="'${paramDesc}'"
    fi

cat - <<FUNCTION_DOC_PARAM
        - name: ${varName}
          type: ${typeInfo}
          default: ${defaultValue}
          description: ${paramDesc}
FUNCTION_DOC_PARAM
done

if (( ${#children[@]} == 0 )); then
    cat - <<CLASS_DOC_CHILD_EMPTY
children: []
CLASS_DOC_CHILD_EMPTY
else
    cat - <<CLASS_DOC_CHILD
children:
CLASS_DOC_CHILD
fi

for doc in "${children[@]}"; do
    cat - <<CLASS_DOC_CHILD_LIST
    - name: ${doc#*.}
      value: ${base}.${class}.${doc}.md
CLASS_DOC_CHILD_LIST
done
cat - <<CLASS_DOC_TERM
---
CLASS_DOC_TERM

if [[ -e docs/${file}.${funct} ]]; then
    cat docs/${file}.${funct}
fi


