#!/bin/bash

function printMembers {

    memberType=$1
    actionType=$2
    shift
    shift

    if [[ ${#} != 0 ]]; then

        printf "%s\n"   '<div class="classBlock">' \
                        '   <div class="classRow"><div class="classSect">'${memberType}':</div></div>' \
                        '</div>' \
                        '<div class="classBlock">'

        for member in "${@}"; do
            case ${actionType} in
                Constructor)
                    ret=""
                    main="${member%)*})"
                    mark=${member##*)}
                    ;;
                Variable)
                    ret=${member% *}
                    main=${member#* }
                    mark=""
                    ;;
                Method)
                    ret=${member%% *}
                    m1=${member#* }
                    main="${m1%)*})"
                    mark=${member##*)}
                    ;;
                VMethod)
                    ret=${member%% *}
                    m1=${member#* }
                    main="${m1%)*})"
                    mark=${member##*)}
                    ;;
            esac

            printf "%s\n" '<div class="classRow"><div class="methodRet">'${ret}'</div><div class="methodName">'${main}'</div><div class="methodMark">'${mark}'</div></div>'
        done

        printf "%s\n" '</div>'
    fi
}

function printMethodDetail {

    memberType=$1
    action=$2
    shift
    shift

    if [[ ${#} != 0 ]]; then
        if [[ "${action}" == "Param" ]]; then
            printf "%s\n"   '<div class="classBlock">' \
                            '   <div class="classRow"><div class="classSect">'${memberType}'</div></div>' \
                            '</div>' \
                            '<div class="classBlock">'

            for members in "${@}"; do
                name=${members%% *}
                desc=${members#* }
                printf "%s\n" '<div class="classRow"><div class="classItem">'${name}'</div><div class="classValue">'${desc}'</div></div>'
            done

            printf "%s\n"   '</div>'
        else
            printf "%s\n"   '<div class="classBlock">' \
                            '   <div class="classRow"><div class="classSect">Return Value</div></div>' \
                            '   <div class="classRow"><div class="classDesc">' \

            printf "%s<br>\n" "${@}"

            printf "%s\n"   '</div></div>' \
                            '</div>'
        fi
    fi
}

function printService {

    declare -a exampleDoc=(${!1})
    declare -a documentation=(${!2})
    declare -a headerA=(${!3})
    namespace=$4
    serviceName=$5

    printf "## Service\n"
    printf "%s\n" "${exampleDoc[@]}"
    printf "%s\n" "${documentation[@]}"
    printf "<dl>\n"
    printf "<dt>NameSpace:</dt><dd>%s</dd>\n" ${namespace}
    printf "<dt>Headers:</dt><dd>%s/</dd>\n"  ${serviceName}

    for loop in "${headerA[@]}"; do

        IFS=$'\n' classNames=( $(grep -E '^(class|struct) [A-Z][a-zA-Z0-9_]*(: |$)' ${loop}) )

        printf "<dt>%s</dt><dd>\n\n" ${loop}
        printf "* %s\n" "${classNames[@]}"
        printf "\n</dd>\n"

    done
    printf "</dl>\n"
}

function printClass {

    declare -a exampleDoc=(${!1})
    declare -a documentation=(${!2})
    declare -a publicC=(${!3})
    declare -a publicV=(${!4})
    declare -a publicM=(${!5})
    declare -a protect=(${!6})
    declare -a virtual=(${!7})

    className=$8
    libTarget=$9
    header=${10}
    namespace=${11}
    classType=${12}
    parent=${13}

    printf "### %s\n"   "${className}"
    printf "%s\n"       "${exampleDoc[@]}"
    printf "%s\n"       '<div class="classTable allowFloat">'   \
                        '   <div class="classLayout">'          \
                        '       <div class="classBlock">'       \
                        '           <div class="classRow"><div class="classItem">Header:   </div><div class="classValue">'${libTarget}'/'${header}'</div></div>'    \
                        '           <div class="classRow"><div class="classItem">NameSpace:</div><div class="classValue">'${namespace}'</div></div>'              \
                        '           <div class="classRow"><div class="classItem">'${classType}':  </div><div class="classValue">'${className}'</div></div>'

    if [[ "${parent}" != "" ]]; then
        printf "%s\n"   '           <div class="classRow"><div class="classItem">Parent:   </div><div class="classValue">'${parent}'</div></div>'
    fi

    printf "%s\n"       '       </div>'                         \
                        '       <div class="classBlock">'       \
                        '           <div class="classRow"><div class="classDesc">'

    printf "%s<br>\n" "${documentation[@]}"

    printf "%s\n"       '           </div></div>'               \
                        '       </div>'

    printMembers "Public Constructor" Constructor "${publicC[@]}"
    printMembers "Public Variables"   Variable    "${publicV[@]}"
    printMembers "Public Methods"     Method      "${publicM[@]}"
    printMembers "Protected Methods"  Method      "${protect[@]}"
    printMembers "Virtual Methods"    VMethod     "${virtual[@]}"

    printf "%s\n"       '   </div>'                             \
                        '</div>'
}

function printMethod {

    declare -a exampleDoc=(${!1})
    declare -a documentation=(${!2})
    declare -a methodR=(${!3})
    declare -a methodP=(${!4})
    methodNoParam=$5
    methodNoClass=$6

    printf "#### %s\n"  "${methodNoParam}"
    printf "%s\n"       "${exampleDoc[@]}"
    printf "%s\n"       '<div class="classTable allowFloat">'       \
                        '   <div class="classLayout">'              \
                        '       <div class="classBlock">'           \
                        '           <div class="classRow"><div class="classSect">'${methodNoClass}'</div></div>'  \
                        '           <div class="classRow"><div class="classDesc">'

    printf "%s<br>\n" ${documentation[@]}

    printf "%s\n"       '           </div></div>'                   \
                        '       </div>'

    printMethodDetail "Return Value"  Return "${methodR[@]}"
    printMethodDetail "Parameters"    Param  "${methodP[@]}"

    printf "%s\n"       '   </div>'                                 \
                        '</div>'
}

function doService {

    serviceName=$1
    echo "Building Documentaiton for ${serviceName}" 1>&2
    shift

    headerA=()
    sourceA=()
    args=( "$@" )
    for loop in "${args[@]}"; do
       doc=${loop#*/}
       base=${doc%.doc}
       headerA+=("${base}.h")
       sourceA+=("${base}.cpp")
    done

    namespace=$(awk '/using namespace/{print $3}' ${sourceA[@]} | sed -e 's/;//' | uniq) 

    doc=0
    documentation=()
    exampleDoc=()
    # for loop in "${headerA[@]}" "${sourceA[@]}"; do
    while read -r line; do
        marker=$(echo "${line}" | xargs 2> /dev/null )
        if [[ ${doc} == 1 ]]; then
            if [[ "${marker}" == "*/" ]]; then
                doc=0
            else
                docLine=${marker#\*}
                if   [[ "${docLine}" == @\ example\ * ]]; then
                    file=${docLine#@ example }
                    IFS=$'\n' exampleDoc=( $(cat ${file} ) )
                else
                    documentation+=( "${docLine}" )
                fi
            fi
        else
            if [[ "${marker}" == "/** LibDesc:" ]]; then
                doc=1
            fi
        fi
    done < <(cat "${headerA[@]}" "${sourceA[@]}")
    # done

    printService exampleDoc[@] documentation[@] headerA[@] $namespace $serviceName
}

function doSection {

    libTarget=$1
    docTarget=$2
    doc=${docTarget#*/}
    base=${doc%.doc}
    header="${base}.h"
    source="${base}.cpp"
    templatesource="${base}.tpp"

    namespace=$(awk '/using namespace/{print $3}' ${source} | sed -e 's/;//' | uniq) 
    IFS=$'\n' classNames=( $(grep -E '^(class|struct) [A-Z][a-zA-Z0-9_]*(: |$)' ${header}))

    for loop in "${classNames[@]}"; do

        echo "Building Documentation for ${libTarget} ${docTarget} ${loop}" 1>&2

        classType=$(echo ${loop} | awk '{print $1}')
        className=$(echo ${loop} | awk '{print $2}' | sed -e 's/://')
        parentFull=$(echo ${loop} | awk -F: '{print $2}' | awk '{print $2}')
        parent=${parentFull%<*}

        docClass=0
        classFound=
        documentation=()
        publicC=()
        publicV=()
        publicM=()
        protect=()
        virtual=()
        exampleDoc=()
        while read -r line; do
            marker=$(echo "${line}" | xargs 2> /dev/null )
            classNewFound=$(echo ${line} | grep -E '^(class|struct) [A-Z][a-zA-Z0-9_]*(: |$)' | awk '{print $2}' | sed -e 's/://')
            classFound=${classNewFound:=${classFound}}
            if [[ ${docClass} == 1 ]]; then
                if [[ "${marker}" == "*/" ]]; then
                    docClass=0
                else
                    docLine=${marker#\*}
                    if   [[ "${docLine}" == @\ public\ constructor\ * ]]; then publicC+=( "${docLine#@ public constructor }" );
                    elif [[ "${docLine}" == @\ public\ variable\ *    ]]; then publicV+=( "${docLine#@ public variable }" );
                    elif [[ "${docLine}" == @\ public\ method\ *      ]]; then publicM+=( "${docLine#@ public method }" );
                    elif [[ "${docLine}" == @\ protected\ method\ *   ]]; then protect+=( "${docLine#@ protected method }" );
                    elif [[ "${docLine}" == @\ virtual\ method\ *     ]]; then virtual+=( "${docLine#@ virtual method }" );
                    elif [[ "${docLine}" == @\ example\ * ]]; then
                        file=${docLine#@ example }
                        IFS=$'\n' exampleDoc=( $(cat ${file} ) )
                    else
                        documentation+=( "${docLine}" )
                    fi
                fi
            else
                if [[ "${marker}" == "/** ClassDesc:" && "${classFound}" == "${className}" ]]; then
                    docClass=1
                fi
            fi
        done < "${header}"

        printClass exampleDoc[@] documentation[@] publicC[@] publicV[@] publicM[@] protect[@] virtual[@] "$className" "$libTarget" "$header" "$namespace" "$classType" "$parent"

        docMethod=0
        while read -r sourceLine; do
            sourceMarker=$(echo "${sourceLine}" | xargs 2> /dev/null )
            newMethodFound=$(echo ${sourceLine} | grep -E '^([ \t]*)?(//[ \t]*)?(virtual )?(inline )?(const )?[A-Za-z1-9_]*( const)?\**&* [A-Z][A-Za-z0-9_]*::[a-z][A-Za-z0-9_]*\(')
            if [[ ${newMethodFound} != "" ]]; then
                if [[ ${newMethodFound} =~ "${className}::" ]]; then
                    methodDropQu=$(echo ${newMethodFound} | sed -e 's#^[ \t]*\(//\)\{0,1\}[ \t]*virtual ##' -e 's/^[ \t]*inline //' -e 's/^[ \t]*const //')
                    methodNoType=${methodDropQu#* }
                    methodNoParam=${methodNoType%%(*}
                    methodNoClass=${methodNoType#*::}
                    methodFound=${methodDropQu}
                else
                    methodFound=""
                fi
            fi
            if [[ ${docMethod} == 1 ]]; then
                if [[ "${sourceMarker}" == "*/" ]]; then
                    docMethod=0
                    printMethod exampleDoc[@] documentation[@] methodR[@] methodP[@] $methodNoParam $methodNoClass
                else
                    docLine=${sourceMarker#\*}
                    if   [[ "${docLine}" == @\ return\ * ]]; then methodR+=( "${docLine#@ return }" );
                    elif [[ "${docLine}" == @\ param\ *  ]]; then methodP+=( "${docLine#@ param }" );
                    elif [[ "${docLine}" == @\ example\ * ]]; then
                        file=${docLine#@ example }
                        IFS=$'\n' exampleDoc=( $(cat ${file} ) )
                    else
                        documentation+=( "${docLine}" )
                    fi
                fi
            else
                if [[ "${sourceMarker}" == "/** MethodDesc:" && "${methodFound}" != "" ]]; then
                    docMethod=1
                    documentation=()
                    methodR=()
                    methodP=()
                    exampleDoc=()
                fi
            fi
        done < <(cat ${source} ${templatesource} ${header})
    done
}


action=$1
shift

case "${action}" in
    Service)
        doService "$@"
    ;;
    Section)
        doSection "$@"
    ;;
    *)
        echo "Error: Unknown command"
        exit 1
    ;;
esac

