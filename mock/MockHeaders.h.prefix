/*
 * This is a generated file do not edit.
 * See ThorBuilder for details
 *
 */


#ifndef THORSANVIL_BUILD_TOOLS_MOCK_H
#define THORSANVIL_BUILD_TOOLS_MOCK_H

#include <gtest/gtest.h>
#include <functional>
#include <vector>
#include <string>

/*
 * Macros to build unique names for mock functions.
 */
#define MOCK_BUILD_MOCK_NAME_EXPAND_(v, package, name)      mock_ ## v ## _ ## package ## _ ## name
#define MOCK_BUILD_MOCK_NAME_EXPAND(v, package, name)       MOCK_BUILD_MOCK_NAME_EXPAND_(v, package, name)
#define MOCK_BUILD_MOCK_SNAME(name)                         MOCK_BUILD_MOCK_NAME_EXPAND(1, THOR_PACKAGE_NAME, name)
#define MOCK2_BUILD_MOCK_SNAME(name)                        MOCK_BUILD_MOCK_NAME_EXPAND(2, THOR_PACKAGE_NAME, name)
#define MOCK_BUILD_MOCK_NAME(name)                          ThorsAnvil::BuildTools::Mock:: MOCK_BUILD_MOCK_NAME_EXPAND(1, THOR_PACKAGE_NAME, name)
#define MOCK2_BUILD_MOCK_NAME(name)                         ThorsAnvil::BuildTools::Mock:: MOCK_BUILD_MOCK_NAME_EXPAND(2, THOR_PACKAGE_NAME, name)

/*
 * Defines unique name for local scope.
 */
#define MOCK_SYS_EXPAND_(type, func, mocked, lambda)        ThorsAnvil::BuildTools::Mock::MockOutFunction<type>  mockOutFunction_ ## func(mocked, lambda)
#define MOCK_SYS_EXPAND(type, func, mocked, lambda)         MOCK_SYS_EXPAND_(type, func, mocked, lambda)

/*
 * Define a function as being mockable
 */
#define MOCK_FUNC(x)                                        MOCK_BUILD_MOCK_NAME(x)
#define MOCK_TFUNC(x)                                       MOCK_BUILD_MOCK_NAME(x)

/*
 * Override a function in the unit tests with a lambda.
 * This defines a scoped variable.
 * Thus at the end of scope of the original function is reinstated.
 */
#define MOCK_TSYS(func, lambda)                             MOCK_SYS_EXPAND(ThorsAnvil::BuildTools::Mock::FuncType_ ## func, func, MOCK_BUILD_MOCK_NAME(func), lambda)
#define MOCK_SYS(func, lambda)                              MOCK_SYS_EXPAND(ThorsAnvil::BuildTools::RemoveNoExcept<decltype(::func)>, func, MOCK_BUILD_MOCK_NAME(func), lambda)

/*
 * Level 1 override
 * An object that overrides all mocked functions with a lambda to return a default value
 * so that no mocked functions are called.
 */
#define MOCK_MEMBER_EXPAND(type, func)                      ThorsAnvil::BuildTools::Mock::MockOutFunction<type> mockOutFunction_ ## func
#define MOCK_TMEMBER(func)                                  MOCK_MEMBER_EXPAND(ThorsAnvil::BuildTools::Mock::FuncType_ ## func, func)
#define MOCK_MEMBER(func)                                   MOCK_MEMBER_EXPAND(decltype(::func), func)
#define MOCK_PARAM_EXPAND(func, name, lambda)               mockOutFunction_ ## func(name, lambda)
#define MOCK_PARAM(func, lambda)                            MOCK_PARAM_EXPAND(func, MOCK_BUILD_MOCK_NAME(func), lambda)

/*
 * Level 2 override.
 * These work to define members in an object.
 * We use the object to store multiple return values.
 */
#define MOCK2_PARAM_EXPAND(func, name1, name2)              mockOutFunction_ ## func(parent, name1, name2)
#define MOCK2_MEMBER_EXPAND(type, func)                     MockFunctionOveride<type> mockOutFunction_ ## func
#define MOCK2_TMEMBER(func)                                 MOCK2_MEMBER_EXPAND(ThorsAnvil::BuildTools::Mock::FuncType_ ## func, func)
#define MOCK2_MEMBER(func)                                  MOCK2_MEMBER_EXPAND(decltype(::func), func)
#define MOCK2_TMEM_PARAM(func)                              MOCK2_PARAM_EXPAND(func, MOCK_BUILD_MOCK_NAME(func), MOCK2_BUILD_MOCK_NAME(func))
#define MOCK2_MEM_PARAM(func)                               MOCK2_PARAM_EXPAND(func, MOCK_BUILD_MOCK_NAME(func), MOCK2_BUILD_MOCK_NAME(func))


/*
 * Macros used to convert a function name into appropriate variable
 * Used with MOCK2_* calls 
 */
#define expectObjectTA(name)                                expectObject(ThorsAnvil::BuildTools::Mock:: name)

#define expectInitTA(func)                                  expectInit(MOCK2_BUILD_MOCK_NAME(func))
#define expectDestTA(func)                                  expectDest(MOCK2_BUILD_MOCK_NAME(func))
#define expectCallTA(func)                                  expectCall(MOCK2_BUILD_MOCK_NAME(func))
#define optionalTA(func)                                    optional(MOCK2_BUILD_MOCK_NAME(func))

namespace ThorsAnvil::BuildTools
{
    /*
     * Meta programming:
     *  Extract information from Types
     */

    template<typename F>
    struct ReturnTypeExtractor;

    template<typename R, typename... Args>
    struct ReturnTypeExtractor<R(Args...)>
    {
        using Type = R;
    };

    template<typename F>
    using ReturnType = typename ReturnTypeExtractor<F>::Type;

    // ---------

    // Standardize: Parameter Type for storage.
    template<typename P>
    struct StandardParameterTypeExtractor
    {
        using Type = P;
    };

    template<>
    struct StandardParameterTypeExtractor<char const*>
    {
        using Type = std::string;
    };

    template<typename P>
    using StandardParameter = typename StandardParameterTypeExtractor<P>::Type;

    // ---------

    template<typename F>
    struct ParameterTypeExtractor;

    template<typename R, typename... Args>
    struct ParameterTypeExtractor<R(Args...)>
    {
        using Type = std::tuple<StandardParameter<Args>...>;
    };

    template<typename F>
    using ParameterType = typename ParameterTypeExtractor<F>::Type;

    // ---------------

    template<typename F>
    struct ArgumentsExtractor;
    template<typename R, typename... Args>
    struct ArgumentsExtractor<R(Args...)>
    {
        using Type = std::tuple<Args...>;
    };

    template<typename F>
    using Arguments = typename ArgumentsExtractor<F>::Type;

    // -----------------

    template <typename T>
    struct RemoveNoExceptExtractor
    {
        using Type = T;
    };

    template <typename R, typename... Args>
    struct RemoveNoExceptExtractor<R(Args...) noexcept>
    {
        using Type = R(Args...);
    };

    template <typename F>
    using RemoveNoExcept = typename RemoveNoExceptExtractor<F>::Type;

    // ---------------------

    template<typename R>
    struct OutputTypeExtractor
    {
        using Type = R;
    };
    template<>
    struct OutputTypeExtractor<void>
    {
        using Type = bool;
    };

    template<typename R>
    using OutputType = typename OutputTypeExtractor<R>::Type;

    // ---------------------
}

namespace ThorsAnvil::BuildTools::Mock
{
    /*
     *  template<typename Func>
     *  struct MockFunctionHolder;
     *
     *  template<typename Func>
     *  struct MockOutFunction;
     *
     *  template<typename MockObject>
     *  class TA_ObjectOption;
     *
     *  class TA_Object;
     *
     *  template<typename MockObject>
     *  class TA_Code;
     *
     *  class TA_Test;
     *
     *  template<typename R, typename... Args>
     *  class MockResultHolder<R(Args...)>;
     *
     *  template<typename R, typename... Args>
     *  class MockFunctionOveride<R(Args...)>;
     *
     */

        /*
         * Enum
         */
        enum BlockType {Init, Dest, Opt, Extra, BlockSize};
        enum Action {Adding, Cleaning, AddExtra};
        enum class Required {Yes, No};
        enum class Order {InOrder, Any};
        enum class Insert {Append, Inject};

        using ActionInit = std::function<std::size_t(Action, std::size_t)>;
        using ActionStore = std::vector<ActionInit>;

        /*
         * Forward declarations
         */
        template<typename R, typename... Args>
        class MockFunctionOveride;

        template<typename R, typename... Args>
        class MockResultHolder;

        class TA_Test;

        class TA_Object;

        /*
         * Functions
         */
        TA_Object build();

        /*
         * Classes declarations:
         */

        template<typename Func>
        struct MockFunctionHolder
        {
            using Param   = ParameterType<Func>;

            std::string             name;
            std::function<Func>     action;

            template<typename F>
            MockFunctionHolder(std::string const& name, F&& action);
            std::string const& getName() const;
            template<typename... Args>
            ReturnType<Func> operator()(Args&&... args);
        };

        template<typename Func>
        struct MockOutFunction
        {
            std::function<Func>         old;
            MockFunctionHolder<Func>&   orig;
            MockOutFunction(MockFunctionHolder<Func>& orig, std::function<Func>&& mock);
            ~MockOutFunction();
        };

        template<typename MockObject>
        class TA_ObjectOption
        {
            using Param      = typename MockObject::Param;
            using Ret        = typename MockObject::Ret;
            using ParamStore = std::optional<Param>;
            using ReturnStore= std::optional<Ret>;

            TA_Object&      object;
            BlockType       blockType;
            MockObject*     mockObjectHolder;
            std::size_t     callCount;
            ReturnStore     result;
            ParamStore      input;
            Required        required;
            Order           order;

            public:
                TA_ObjectOption(TA_Object& object, BlockType blockType, std::size_t callCount, MockObject& mockObjectHolder, Required required, Order order);

                operator TA_Object& ();
                TA_ObjectOption& toReturn(Ret&& ret);
                TA_ObjectOption& anyOrder();
                TA_ObjectOption& count(int newCount);
                template<typename... Args>
                TA_ObjectOption& checkInput(Args... args);

                template<typename NextMockObject>
                TA_ObjectOption<NextMockObject> expectInit(NextMockObject& action);
                template<typename NextMockObject>
                TA_ObjectOption<NextMockObject> expectDest(NextMockObject& action);
                template<typename NextMockObject>
                TA_ObjectOption<NextMockObject> optional(NextMockObject& action);
            private:
                void saveCall();
        };

        class TA_Object
        {
            template<typename MockObject>
            friend class TA_ObjectOption;
            template<typename MockObject>
            friend class TA_Code;
            friend class TA_Test;

            ActionStore block[BlockSize];
            std::vector<std::function<void()>>     reset;

            public:
                template<typename MockObject>
                TA_ObjectOption<MockObject> expectInit(MockObject& action);

                template<typename MockObject>
                TA_ObjectOption<MockObject> expectDest(MockObject& action);

                template<typename MockObject>
                TA_ObjectOption<MockObject> optional(MockObject& action);

            private:
                template<typename MockObject>
                void saveCall(MockObject& action, BlockType blockType, std::size_t callCount, std::optional<typename MockObject::Ret>&& result, std::optional<typename MockObject::Param>&& input, Insert insert, Order order);

                bool hasExtraCode() const;
                void addInit(std::size_t callOrder) const;
                void addDest(std::size_t callOrder) const;
                void addExtraCode(std::size_t callOrder) const;
                void remInit(bool checkForExtraCode, bool removeOpt) const;
                void remDest(bool checkForExtraCode) const;
                void remExtraCode() const;
        };

        template<typename MockObject>
        class TA_Code
        {
            using Param         = typename MockObject::Param;
            using ParamStore    = std::optional<Param>;
            protected:
                TA_Test&    parent;
                MockObject& action;
                std::size_t callCount;
                ParamStore  input;
                Insert      insert;
                Order       order;
                bool        callSaved;

            public:
                using Ret = typename MockObject::Ret;

                TA_Code(TA_Test& parent, MockObject& action, Insert insert, Order order);

                TA_Code& toReturn(Ret&& result);
                TA_Code& inject();
                TA_Code& anyOrder();
                TA_Code& count(int newCount);
                template<typename... Args>
                TA_Code& checkInput(Args... args);

                template<typename NextMockObject>
                TA_Code<NextMockObject> expectCall(NextMockObject& nextAction);

                TA_Test& expectObject(TA_Object const& object);
                TA_Test& expectCode(TA_Object const& object);
                void run();
            private:
                void saveCall(std::optional<Ret>&& result);
        };

        class TA_Test
        {
            enum State {Init, Construct, Destruct, Error, Cleanup, Finished};
            bool                            hasRun;
            std::vector<TA_Object>          codeBlocks;
            std::size_t                     callOrder;
            std::size_t                     next;
            bool                            exceptionSpotted;
            State                           state;

            public:
                TA_Test();
                ~TA_Test();

                TA_Test& expectObject(TA_Object const& object);
                TA_Test& expectCode(TA_Object const& object);

                template<typename MockObject>
                TA_Code<MockObject> expectCall(MockObject& action);
                void run();

            protected:
                bool isExceptionSpotted() const {return exceptionSpotted;}
                bool unexpectedThrow(bool exceptionInProgress);
                virtual void runLambda() = 0;

            private:
                template<typename R, typename... Args>
                friend class MockResultHolder;

                bool unexpected();
                bool mockCalled(std::size_t order);

            private:
                template<typename MockObject>
                friend class TA_Code;

                void addInit();
                void addDest();
                void addExtraCode();
                void remInit(bool checkForExtraCode, bool removeOpt);
                void remDest(bool checkForExtraCode);
                void remExtraCode();
                void setDest(bool exceptionInProgress);
        };

        template<typename R, typename... Args>
        class MockResultHolder<R(Args...)>
        {
            public:
                using Ret   = OutputType<R>;
                using Param = ParameterType<R(Args...)>;
            private:
                friend class MockFunctionOveride<R(Args...)>;
                using Expected = std::tuple<std::size_t, std::size_t, std::optional<Ret>, std::optional<Param>, Required>;

                std::string                     name;
                std::function<R(Args...)>       original;
                std::vector<Expected>           expected;
                std::size_t                     next;
                bool                            errorMode;

            public:
                template<typename F>
                MockResultHolder(std::string const& name, F&& original);

                std::string const& getName() const;
                std::size_t setUpExpectedCall(Action action, std::size_t index, std::size_t count, std::optional<Ret>&& value, std::optional<Param>&& input, Required required, Order order);
                void tearDownExpectedCall(bool checkUsage);
                R call(TA_Test& parent, Args&&... args);
        };

        /*
         * An object that will replace the current definition of the function.
         * Constructor sets its. Destructor replaces the original value.
         */
        template<typename R, typename... Args>
        class MockFunctionOveride<R(Args...)>
        {
            using Version1Holder    = ThorsAnvil::BuildTools::Mock::MockFunctionHolder<R(Args...)>;
            using Version2Holder    = ThorsAnvil::BuildTools::Mock::MockResultHolder<R(Args...)>;

            TA_Test&                        parent;
            Version1Holder&                 v1Holder;
            Version2Holder&                 v2Holder;
            std::function<R(Args...)>       old;


            public:
                MockFunctionOveride(TA_Test& parent, Version1Holder& v1Holder, Version2Holder& v2Holder);
                ~MockFunctionOveride();
        };

// -------------------------
// MockFunctionHolder
// -------------------------

template<typename Func>
template<typename F>
MockFunctionHolder<Func>::MockFunctionHolder(std::string const& name, F&& action)
    : name(name)
    , action(std::move(action))
{}

template<typename Func>
std::string const& MockFunctionHolder<Func>::getName() const
{
    return name;
}

template<typename Func>
template<typename... Args>
ReturnType<Func> MockFunctionHolder<Func>::operator()(Args&&... args)
{
    return action(std::forward<Args>(args)...);
}

// -------------------------
// TA_ObjectOption
// -------------------------

template<typename Func>
MockOutFunction<Func>::MockOutFunction(MockFunctionHolder<Func>& orig, std::function<Func>&& mock)
    : old(std::move(mock))
    , orig(orig)
{
    //std::cerr << "Overriding: " << orig.name << "\n";
    swap(old, orig.action);
}

template<typename Func>
MockOutFunction<Func>::~MockOutFunction()
{
    //std::cerr << "Resetting : " << orig.name << "\n";
    swap(old, orig.action);
}

// -------------------------
// TA_ObjectOption
// -------------------------

template<typename MockObject>
TA_ObjectOption<MockObject>::TA_ObjectOption(TA_Object& object, BlockType blockType, std::size_t callCount, MockObject& mockObjectHolder, Required required, Order order)
    : object(object)
    , blockType(blockType)
    , mockObjectHolder(&mockObjectHolder)
    , callCount(callCount)
    , result()
    , required(required)
    , order(order)
{}

template<typename MockObject>
TA_ObjectOption<MockObject>::operator TA_Object& ()
{
    saveCall();
    return object;
}

template<typename MockObject>
TA_ObjectOption<MockObject>& TA_ObjectOption<MockObject>::toReturn(Ret&& ret)
{
    result = std::move(ret);
    return *this;
}

template<typename MockObject>
TA_ObjectOption<MockObject>& TA_ObjectOption<MockObject>::anyOrder()
{
    order = Order::Any;
    return *this;
}

template<typename MockObject>
template<typename... Args>
TA_ObjectOption<MockObject>& TA_ObjectOption<MockObject>::checkInput(Args... args)
{
    input = std::make_tuple(args...);
    return *this;
}

template<typename MockObject>
TA_ObjectOption<MockObject>& TA_ObjectOption<MockObject>::count(int newCount)
{
    callCount = newCount;
    return *this;
}

template<typename MockObject>
template<typename NextMockObject>
TA_ObjectOption<NextMockObject> TA_ObjectOption<MockObject>::expectInit(NextMockObject& action)
{
    saveCall();
    return TA_ObjectOption<NextMockObject>(object, BlockType::Init, 1, action, Required::Yes, Order::InOrder);
}

template<typename MockObject>
template<typename NextMockObject>
TA_ObjectOption<NextMockObject> TA_ObjectOption<MockObject>::expectDest(NextMockObject& action)
{
    saveCall();
    return TA_ObjectOption<NextMockObject>(object, BlockType::Dest, 1, action, Required::Yes, Order::InOrder);
}

template<typename MockObject>
template<typename NextMockObject>
TA_ObjectOption<NextMockObject> TA_ObjectOption<MockObject>::optional(NextMockObject& action)
{
    saveCall();
    return TA_ObjectOption<NextMockObject>(object, BlockType::Opt, -1, action, Required::No, Order::Any);
}

template<typename MockObject>
void TA_ObjectOption<MockObject>::saveCall()
{
    object.saveCall(*mockObjectHolder, blockType, callCount, std::move(result), std::move(input), Insert::Append, order);
}

// -------------------------
// TA_Object
// -------------------------
template<typename MockObject>
TA_ObjectOption<MockObject> TA_Object::expectInit(MockObject& action)
{
    return TA_ObjectOption(*this, BlockType::Init, 1, action, Required::Yes, Order::InOrder);
}

template<typename MockObject>
TA_ObjectOption<MockObject> TA_Object::expectDest(MockObject& action)
{
    return TA_ObjectOption(*this, BlockType::Dest, 1, action, Required::Yes, Order::InOrder);
}

template<typename MockObject>
TA_ObjectOption<MockObject> TA_Object::optional(MockObject& action)
{
    return TA_ObjectOption(*this, BlockType::Opt, -1, action, Required::No, Order::Any);
}

template<typename MockObject>
void TA_Object::saveCall(MockObject& action, BlockType blockType, std::size_t callCount, std::optional<typename MockObject::Ret>&& result, std::optional<typename MockObject::Param>&& input, Insert insert, Order order)
{
    if (insert == Insert::Inject) {
        reset.emplace_back([mockObject = &action](){mockObject->tearDownExpectedCall(false);});
    }
    block[blockType].emplace_back([mockObject = &action, c = callCount, r = std::move(result), in = std::move(input), o = order](Action action, std::size_t index) mutable {
        if (action == Action::Cleaning) {
            mockObject->tearDownExpectedCall(index == 0);
            return std::size_t(0);
        }
        return mockObject->setUpExpectedCall(action, index, c, std::move(r), std::move(in), Required::Yes, o);
    });
}

// -------------------------
// TA_Code
// -------------------------

template<typename MockObject>
TA_Code<MockObject>::TA_Code(TA_Test& parent, MockObject& action, Insert insert, Order order)
    : parent(parent)
    , action(action)
    , callCount(1)
    , insert(insert)
    , order(order)
    , callSaved(false)
{}

template<typename MockObject>
void TA_Code<MockObject>::run()
{
    if (!callSaved) {
        saveCall({});
    }
    parent.run();
}

template<typename MockObject>
TA_Code<MockObject>& TA_Code<MockObject>::toReturn(Ret&& result)
{
    saveCall(std::forward<Ret>(result));
    return *this;
}

template<typename MockObject>
TA_Code<MockObject>& TA_Code<MockObject>::inject()
{
    insert = Insert::Inject;
    return *this;
}

template<typename MockObject>
TA_Code<MockObject>& TA_Code<MockObject>::anyOrder()
{
    order = Order::Any;
    return *this;
}

template<typename MockObject>
TA_Code<MockObject>& TA_Code<MockObject>::count(int newCount)
{
    callCount = newCount;
    return *this;
}

template<typename MockObject>
template<typename... Args>
TA_Code<MockObject>& TA_Code<MockObject>::checkInput(Args... args)
{
    input = std::make_tuple(args...);
    return *this;
}

template<typename MockObject>
TA_Test& TA_Code<MockObject>::expectObject(TA_Object const& object)
{
    if (!callSaved) {
        saveCall({});
    }
    return parent.expectObject(object);
}

template<typename MockObject>
TA_Test& TA_Code<MockObject>::expectCode(TA_Object const& object)
{
    if (!callSaved) {
        saveCall({});
    }
    return parent.expectCode(object);
}

template<typename MockObject>
template<typename NextMockObject>
TA_Code<NextMockObject> TA_Code<MockObject>::expectCall(NextMockObject& nextAction)
{
    if (!callSaved) {
        saveCall({});
    }
    return TA_Code<NextMockObject>(parent, nextAction, Insert::Append, Order::InOrder);
}

template<typename MockObject>
void TA_Code<MockObject>::saveCall(std::optional<Ret>&& result)
{
    if (parent.codeBlocks.empty()) {
        parent.codeBlocks.emplace_back();
    }
    callSaved = true;
    parent.codeBlocks.back().saveCall(action, BlockType::Extra, callCount, std::move(result), std::move(input), insert, order);
}

// -------------------------
// TA_Test
// -------------------------

template<typename MockObject>
TA_Code<MockObject> TA_Test::expectCall(MockObject& action)
{
    return TA_Code<MockObject>(*this, action, Insert::Append, Order::InOrder);
}

// -------------------------
// MockResultHolder
// -------------------------

template<typename R, typename... Args>
template<typename F>
MockResultHolder<R(Args...)>::MockResultHolder(std::string const& name, F&& original)
    : name(name)
    , original(std::move(original))
    , next(0)
    , errorMode(false)
{}

template<typename R, typename... Args>
std::string const& MockResultHolder<R(Args...)>::getName() const
{
    return name;
}

template<typename R, typename... Args>
std::size_t MockResultHolder<R(Args...)>::setUpExpectedCall(Action action, std::size_t index, std::size_t count, std::optional<Ret>&& value, std::optional<Param>&& input, Required required, Order order)
{
    if (action == AddExtra && !errorMode) {
        expected.clear();
        errorMode = true;
    }
    std::size_t indexOrder = -1;
    if (order == Order::InOrder) {
        indexOrder = index;
        index += count;
    }
    expected.emplace_back(Expected{indexOrder, count, std::move(value), std::move(input), required});
    return index;
}

template<typename R, typename... Args>
void MockResultHolder<R(Args...)>::tearDownExpectedCall(bool checkUsage)
{
    if (checkUsage)
    {
        std::size_t count = 0;
        for (std::size_t loop = next; loop < expected.size(); ++loop) {
            Expected&   expectedInfo = expected[loop];
            Required&   required     = std::get<4>(expectedInfo);
            count += (required == Required::Yes) ? 1: 0;
        }
        EXPECT_EQ(count, 0)
                << "Function: " << getName() << " did not use all expected calls. "
                << (expected.size() - next) << " left unused";
    }
    expected.clear();
    next = 0;
    errorMode = false;
}

template<typename R, typename... Args>
R MockResultHolder<R(Args...)>::call(TA_Test& parent, Args&&... args)
{
    //std::cerr << "Calling: " << getName() << "\n";
    while (next == expected.size()) {
        if (!parent.unexpected()) {
            // There are no more changes that can be made.
            break;
        }
    }

    if (next < expected.size()) {
        Expected&               expectedInfo  = expected[next];
        std::size_t             nextCallIndex = std::get<0>(expectedInfo);
        std::size_t&            callCount     = std::get<1>(expectedInfo);
        std::optional<Param>&   input         = std::get<3>(expectedInfo);

        --callCount;
        if (callCount == 0) {
            ++next;
        }

        EXPECT_TRUE(parent.mockCalled(nextCallIndex)) << "Function: " << getName() << "Called out of order";

        if (input.has_value()) {
            EXPECT_EQ(input.value(), std::make_tuple(args...));
        }

        if constexpr (std::is_same_v<R, void>) {
            return;
        }
        else {
            std::optional<R>& resultOpt = std::get<2>(expectedInfo);
            if (resultOpt.has_value()) {
                return resultOpt.value();
            }
            return {};
        }
    }
    EXPECT_TRUE(next < expected.size()) << "Function: " << getName() << " called more times than expected";
    throw std::runtime_error("Failed");
    // return original(std::forward<Args>(args)...);
}

// -------------------------
// MockFunctionOveride
// -------------------------

template<typename R, typename... Args>
MockFunctionOveride<R(Args...)>::MockFunctionOveride(TA_Test& parent, Version1Holder& v1Holder, Version2Holder& v2Holder)
    : parent(parent)
    , v1Holder(v1Holder)
    , v2Holder(v2Holder)
    , old([&](Args&&... args){return v2Holder.call(parent, std::forward<Args>(args)...);})
{
    std::swap(old, v1Holder.action);
}

template<typename R, typename... Args>
MockFunctionOveride<R(Args...)>::~MockFunctionOveride()
{
    std::swap(old, v1Holder.action);
}

