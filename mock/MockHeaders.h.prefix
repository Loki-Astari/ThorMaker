/*
 * This is a generated file do not edit.
 * See ThorBuilder for details
 *
 */


#ifndef THORSANVIL_BUILD_TOOLS_MOCK_H
#define THORSANVIL_BUILD_TOOLS_MOCK_H

#include <gtest/gtest.h>
#include <functional>
#include <vector>
#include <string>

#define MOCK_BUILD_MOCK_NAME_EXPAND_(package, name)         ThorsAnvil::BuildTools::Mock::mock_ ## package ## _ ## name
#define MOCK_BUILD_MOCK_NAME_EXPAND(package, name)          MOCK_BUILD_MOCK_NAME_EXPAND_(package, name)
#define MOCK_BUILD_MOCK_NAME(name)                          MOCK_BUILD_MOCK_NAME_EXPAND(THOR_PACKAGE_NAME, name)

#define MOCK_SYS_EXPAND_(type, func, mocked, lambda)        ThorsAnvil::BuildTools::Mock::MockOutFunction<type>  mockOutFunction_ ## func(mocked, lambda)
#define MOCK_SYS_EXPAND(type, func, mocked, lambda)         MOCK_SYS_EXPAND_(type, func, mocked, lambda)


#define MOCK_TSYS(type, func, lambda)                       MOCK_SYS_EXPAND(type, func, MOCK_BUILD_MOCK_NAME(func), lambda)
#define MOCK_SYS(func, lambda)                              MOCK_TSYS(ThorsAnvil::BuildTools::Mock::RemoveNoExceptType<decltype(::func)>, func, lambda)

#define MOCK_INPUT(func, ...)                               MOCK_BUILD_MOCK_NAME(func).expectedInput.emplace_back(__VA_ARGS__)



#define MOCK_FUNC(x)                                        MOCK_BUILD_MOCK_NAME(x)
#define MOCK_TFUNC(x)                                       MOCK_BUILD_MOCK_NAME(x)

#define MOCK_MEMBER_EXPAND(type, func)                      ThorsAnvil::BuildTools::Mock::MockOutFunction<type> mockOutFunction_ ## func
#define MOCK_TMEMBER(type, func)                            MOCK_MEMBER_EXPAND(type, func)
#define MOCK_MEMBER(func)                                   MOCK_MEMBER_EXPAND(decltype(::func), func)
#define MOCK_TMEMBER(type, func)                            MOCK_MEMBER_EXPAND(type, func)
#define MOCK_PARAM_EXPAND(func, name, lambda)               mockOutFunction_ ## func(name, lambda)
#define MOCK_PARAM(func, lambda)                            MOCK_PARAM_EXPAND(func, MOCK_BUILD_MOCK_NAME(func), lambda)

namespace ThorsAnvil::BuildTools::Mock
{
    // Return Type: Extracted from a function type.
    template<typename F>
    struct ReturnTypeExtractor;

    template<typename R, typename... Args>
    struct ReturnTypeExtractor<R(Args...)>
    {
        using Type = R;
    };

    template<typename F>
    using ReturnType = typename ReturnTypeExtractor<F>::Type;

    // Standardize: Parameter Type for storage.
    template<typename P>
    struct StandardParameterTypeExtractor
    {
        using Type = P;
    };

    template<>
    struct StandardParameterTypeExtractor<char const*>
    {
        using Type = std::string;
    };
    template<typename P>
    using StandardParameter = typename StandardParameterTypeExtractor<P>::Type;


    template<typename F>
    struct ParameterTypeExtractor;

    template<typename R, typename... Args>
    struct ParameterTypeExtractor<R(Args...)>
    {
        using Type = std::tuple<StandardParameter<Args>...>;
    };

    template<typename F>
    using ParameterType = typename ParameterTypeExtractor<F>::Type;

    template <typename T>
    struct RemoveNoExcept
    {
        using Type = T;
    };

    template <typename R, typename ...P>
    struct RemoveNoExcept<R(P...) noexcept>
    {
        using Type = R(P...);
    };

    template <typename T>
    using RemoveNoExceptType = typename RemoveNoExcept<T>::Type;

    struct MockAction
    {
        std::string                 action;
        std::vector<std::string>    expectedInit;
        std::vector<std::string>    expectedDest;
        std::vector<std::string>    optional;
        std::vector<std::string>    expectedError;
    };


    template<typename Func>
    struct MockFunctionHolder;

    class MockOverride
    {
        static std::vector<MockOverride*>   activeOverride;

        enum State {Construct, Destruct, Error};

        State                   state;
        bool                    exceptionHappened;
        int                     nextExpected;
        int                     nextInSequence;
        std::vector<MockAction> expected;

        public:
            MockOverride();
            ~MockOverride();

        private:
            template<typename Func>
            friend struct MockFunctionHolder;

            static void checkExpectedActive(std::string const& called);
            void checkExpected(std::string const& called);

        private:
            friend class MockActionThrowDetext;
            static void pushActionActive(MockAction action);
            static void popActionActive();
            static void noteExceptionActive();

        private:
            bool peekDestructor(std::string const& called);
            void CheckExpectedConstruct(std::string const& called);
            void CheckExpectedDestruct(std::string const& called);

            void pushAction(MockAction action);
            void popAction();
            void noteException();

    };
    class MockActionThrowDetext
    {
        public:
            MockActionThrowDetext();
            MockActionThrowDetext(MockAction action, std::initializer_list<std::string> errors = {});
            ~MockActionThrowDetext();
    };
    class MockActionAddObject: public MockActionThrowDetext
    {
        public:
            using MockActionThrowDetext::MockActionThrowDetext;
    };
    class MockActionAddCode: public MockActionThrowDetext
    {
        public:
            using MockActionThrowDetext::MockActionThrowDetext;
    };

    template<typename Func>
    struct MockFunctionHolder
    {
        using Param   = ParameterType<Func>;

        std::string             name;
        std::function<Func>     action;
        std::vector<Param>      expectedInput;
        std::size_t             nextInput;

        template<typename F>
        MockFunctionHolder(std::string const& name, F&& action)
            : name(name)
            , action(std::move(action))
            , nextInput(0)
        {}
        template<typename... Args>
        ReturnType<Func> operator()(Args&&... args)
        {
            MockOverride::checkExpectedActive(name);

            if (nextInput < expectedInput.size()) {
                EXPECT_EQ(expectedInput[nextInput], std::tie(args...));
                ++nextInput;
            }
            return action(std::forward<Args>(args)...);
        }
    };

    template<typename Func>
    struct MockOutFunction
    {
        std::function<Func>         old;
        MockFunctionHolder<Func>&   orig;
        MockOutFunction(MockFunctionHolder<Func>& orig, std::function<Func>&& mock)
            : old(std::move(mock))
            , orig(orig)
        {
            //std::cerr << "Overriding: " << orig.name << "\n";
            swap(old, orig.action);
        }
        ~MockOutFunction()
        {
            //std::cerr << "Resetting : " << orig.name << "\n";
            swap(old, orig.action);
            EXPECT_EQ(orig.nextInput, orig.expectedInput.size());
            orig.nextInput = 0;
            orig.expectedInput.clear();
        }
    };


