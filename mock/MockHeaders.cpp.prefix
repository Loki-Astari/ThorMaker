/*
 * This is a generated file do not edit.
 * See ThorBuilder for details
 *
 */

#include "MockHeaders.h"

namespace ThorsAnvil::BuildTools::Mock
{

// -------------------------
// TA_Object
// -------------------------

TA_Object build()
{
    return {};
}

bool TA_Object::hasExtraCode() const
{
    return !block[BlockType::Extra].empty();
}

void TA_Object::addInit(std::size_t callOrder) const
{
    std::size_t expectedCallOrder = callOrder;
    for (std::size_t loop = 0; loop < block[BlockType::Init].size(); ++loop) {
        expectedCallOrder = block[BlockType::Init][loop](Adding, expectedCallOrder);
    }
    for (std::size_t loop = 0; loop < block[BlockType::Opt].size(); ++loop) {
        block[BlockType::Opt][loop](Adding, -1);
    }
    for (std::size_t loop = 0; loop < reset.size(); ++loop) {
        reset[loop]();
    }
}

void TA_Object::addDest(std::size_t callOrder) const
{
    std::size_t expectedCallOrder = callOrder;
    for (std::size_t loop = 0; loop < block[BlockType::Dest].size(); ++loop) {
        expectedCallOrder = block[BlockType::Dest][loop](Adding, expectedCallOrder);
    }
}

void TA_Object::addExtraCode(std::size_t callOrder) const
{
    std::size_t expectedCallOrder = callOrder;
    for (std::size_t loop = 0; loop < block[BlockType::Extra].size(); ++loop) {
        expectedCallOrder = block[BlockType::Extra][loop](AddExtra, expectedCallOrder);
    }
}

void TA_Object::remInit(bool checkForExtraCode, bool removeOpt) const
{
    for (std::size_t loop = 0; loop < block[BlockType::Init].size(); ++loop) {
        block[BlockType::Init][loop](Cleaning, checkForExtraCode ? 0 : -1);
    }
    if (removeOpt)
    {
        for (std::size_t loop = 0; loop < block[BlockType::Opt].size(); ++loop) {
            block[BlockType::Opt][loop](Cleaning, -1);
        }
    }
}

void TA_Object::remDest(bool checkForExtraCode) const
{
    for (std::size_t loop = 0; loop < block[BlockType::Dest].size(); ++loop) {
        block[BlockType::Dest][loop](Cleaning, checkForExtraCode ? 0 : -1);
    }
}

void TA_Object::remExtraCode() const
{
    for (std::size_t loop = 0; loop < block[BlockType::Extra].size(); ++loop) {
        block[BlockType::Extra][loop](Cleaning, -1);
    }
    for (std::size_t loop = 0; loop < block[BlockType::Opt].size(); ++loop) {
        block[BlockType::Opt][loop](Cleaning, -1);
    }
}

// -------------------------
// TA_Test
// -------------------------

TA_Test::TA_Test()
    : hasRun(false)
    , callOrder(0)
    , next(0)
    , exceptionSpotted(false)
    , state(Init)
{}

TA_Test& TA_Test::expectObject(TA_Object const& object)
{
    codeBlocks.emplace_back(object);
    return *this;
}

TA_Test& TA_Test::expectCode(TA_Object const& object)
{
    codeBlocks.emplace_back(object);
    return *this;
}

TA_Test::~TA_Test()
{
    EXPECT_TRUE(hasRun) << "You created a test. But it was not run";
}

void TA_Test::run()
{
    hasRun = true;
    unexpected();
    runLambda();
    while (unexpected()) {
        // If this call generates any required calls.
        // Then we will get appropriate error messages generated.
        // No Code here deliberately
    }
    if (!codeBlocks.empty()) {
        EXPECT_EQ(state, Finished) << "Not all codeBlocks(s) were used in this test";
    }
}

bool TA_Test::mockCalled(std::size_t order)
{
    if (order == std::size_t(-1)) {
        // This is an optional method.
        return true;
    }
    EXPECT_EQ(order, callOrder) << " Functions called in wrong order";
    ++callOrder;
    return (callOrder - 1) == order;
}

void TA_Test::setDest(bool exceptionInProgress)
{
    if (!exceptionSpotted && exceptionInProgress) {
        exceptionSpotted = true;
        --next;
    }
    if (next > 0) {
        addDest();
        state = (next == 0) ? Cleanup : Destruct;
    }
    else {
        state = Finished;
    }
}

bool TA_Test::unexpected()
{
    return unexpectedThrow(std::uncaught_exceptions() > 0);
}

bool TA_Test::unexpectedThrow(bool exceptionInProgress)
{
    //std::cerr << "Unexpected\n";
    if (codeBlocks.size() == 0) {
        return false;
    }

    if (state != Error && next > 0 && next <= codeBlocks.size() && codeBlocks[next-1].hasExtraCode()) {
        //std::cerr << "  Setting Errors\n";
        state = Error;
        remInit(false, false);
        addExtraCode();
        return true;
    }

    if (!exceptionSpotted && exceptionInProgress) {
        //std::cerr << "  Exception in progress\n";
        if (state == Construct || state == Error) {
            bool good =    (next == codeBlocks.size())
                        || ((next + 1 == codeBlocks.size()) && !codeBlocks[next].hasExtraCode());
            EXPECT_TRUE(good) << "Exception happened before all test codeBlocks used";
        }
    }

    //std::cerr << "  Switching State\n";
    switch (state)
    {
        case Init:
        {
            //std::cerr << "    Init -> Construct\n";
            state = Construct;
            addInit();
            break;
        }
        case Construct:
        {
            remInit(true, true);
            if (next < codeBlocks.size()) {
                //std::cerr << "    Construct -> Construct\n";
                addInit();
            }
            else {
                //std::cerr << "    Construct -> Destruct\n";
                setDest(exceptionInProgress);
            }
            break;
        }
        case Destruct:
        {
            remDest(true);
            addDest();
            if (next == 0) {
                //std::cerr << "    Destruct -> Cleanup\n";
                state = Cleanup;;
            }
            else {
                //std::cerr << "    Destruct -> Destruct\n";
            }
            break;
        }
        case Error:
        {
            remExtraCode();
            if (next < codeBlocks.size()) {
                //std::cerr << "    Error -> Construct\n";
                state = Construct;
                addInit();
            }
            else {
                //std::cerr << "    Error -> Destruct\n";
                setDest(exceptionInProgress);
            }
            break;
        }
        case Cleanup:
        {
            //std::cerr << "    Cleanup -> Finished\n";
            remDest(true);
            state = Finished;
            // Fall Through to Finished.
            [[fallthrough]];
        }
        case Finished:
        {
            // There is no change in state that would help
            // resolve an unexpected call.
            //std::cerr << "    Finished -> Finished\n";
            return false;
        }
    }
    return true;
}

void TA_Test::addInit()
{
    codeBlocks[next++].addInit(callOrder);
}

void TA_Test::addDest()
{
    do
    {
        --next;
    }
    while ((codeBlocks[next].block[BlockType::Dest].size() == 0) && next > 0);

    codeBlocks[next].addDest(callOrder);
}

void TA_Test::addExtraCode()
{
    codeBlocks[next-1].addExtraCode(callOrder);
}

void TA_Test::remInit(bool checkForExtraCode, bool removeOpt)
{
    codeBlocks[next-1].remInit(checkForExtraCode, removeOpt);
}

void TA_Test::remDest(bool checkForExtraCode)
{
    codeBlocks[next].remDest(checkForExtraCode);
}

void TA_Test::remExtraCode()
{
    codeBlocks[next-1].remExtraCode();
}

// -------------------------
// TA_TestNoThrow
// -------------------------

void TA_TestNoThrow::runLambda()
{
    EXPECT_NO_THROW(lambda());
}


